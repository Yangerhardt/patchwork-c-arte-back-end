"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNewUserFromValidation = exports.validateUser = exports.mapUserValidationData = void 0;
const User_1 = require("../entities/User");
const UserValidation_1 = require("../entities/dto/UserValidation");
const class_validator_1 = require("class-validator");
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function mapUserValidationData(reqBody) {
    const userValidation = new UserValidation_1.UserValidation();
    userValidation.role = reqBody.role;
    userValidation.name = reqBody.name;
    userValidation.lastName = reqBody.lastName;
    userValidation.email = reqBody.email;
    userValidation.password = reqBody.password;
    userValidation.zip = reqBody.zip;
    userValidation.neighborhood = reqBody.neighborhood;
    userValidation.street = reqBody.street;
    userValidation.streetNumber = reqBody.streetNumber;
    userValidation.streetComplement = reqBody.streetComplement;
    userValidation.city = reqBody.city;
    userValidation.state = reqBody.state;
    return userValidation;
}
exports.mapUserValidationData = mapUserValidationData;
async function validateUser(user) {
    const validationErrors = await (0, class_validator_1.validate)(user);
    const errors = [];
    if (validationErrors.length > 0) {
        validationErrors.forEach((error) => {
            Object.values(error.constraints).forEach((constraint) => {
                errors.push(constraint);
            });
        });
    }
    return errors;
}
exports.validateUser = validateUser;
function createNewUserFromValidation(userValidation) {
    const user = new User_1.User();
    user.role = userValidation.role;
    user.name = userValidation.name;
    user.lastName = userValidation.lastName;
    user.email = userValidation.email;
    user.password = userValidation.password;
    user.zip = userValidation.zip;
    user.neighborhood = userValidation.neighborhood;
    user.street = userValidation.street;
    user.streetNumber = userValidation.streetNumber;
    user.streetComplement = userValidation.streetComplement;
    user.city = userValidation.city;
    user.state = userValidation.state;
    return user;
}
exports.createNewUserFromValidation = createNewUserFromValidation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlTmV3VXNlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9jcmVhdGVOZXdVc2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDJDQUF3QztBQUN4QyxtRUFBZ0U7QUFDaEUscURBQTJDO0FBRTNDLDhEQUE4RDtBQUM5RCxTQUFnQixxQkFBcUIsQ0FBQyxPQUFZO0lBQ2hELE1BQU0sY0FBYyxHQUFHLElBQUksK0JBQWMsRUFBRSxDQUFDO0lBQzVDLGNBQWMsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztJQUNuQyxjQUFjLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDbkMsY0FBYyxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQzNDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUNyQyxjQUFjLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDM0MsY0FBYyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0lBQ2pDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQztJQUNuRCxjQUFjLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDdkMsY0FBYyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBQ25ELGNBQWMsQ0FBQyxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7SUFDM0QsY0FBYyxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ25DLGNBQWMsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUVyQyxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDO0FBaEJELHNEQWdCQztBQUVNLEtBQUssVUFBVSxZQUFZLENBQUMsSUFBb0I7SUFDckQsTUFBTSxnQkFBZ0IsR0FBRyxNQUFNLElBQUEsMEJBQVEsRUFBQyxJQUFJLENBQUMsQ0FBQztJQUM5QyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFFNUIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQy9CLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2pDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFO2dCQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7S0FDSjtJQUVELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFiRCxvQ0FhQztBQUVELFNBQWdCLDJCQUEyQixDQUN6QyxjQUE4QjtJQUU5QixNQUFNLElBQUksR0FBRyxJQUFJLFdBQUksRUFBRSxDQUFDO0lBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsY0FBYyxDQUFDLElBQUksQ0FBQztJQUNoQyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUM7SUFDaEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztJQUNsQyxJQUFJLENBQUMsUUFBUSxHQUFHLGNBQWMsQ0FBQyxRQUFRLENBQUM7SUFDeEMsSUFBSSxDQUFDLEdBQUcsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDO0lBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDLFlBQVksQ0FBQztJQUNoRCxJQUFJLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDcEMsSUFBSSxDQUFDLFlBQVksR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDO0lBQ2hELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsZ0JBQWdCLENBQUM7SUFDeEQsSUFBSSxDQUFDLElBQUksR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDO0lBQ2hDLElBQUksQ0FBQyxLQUFLLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQztJQUNsQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFqQkQsa0VBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXNlciB9IGZyb20gXCIuLi9lbnRpdGllcy9Vc2VyXCI7XHJcbmltcG9ydCB7IFVzZXJWYWxpZGF0aW9uIH0gZnJvbSBcIi4uL2VudGl0aWVzL2R0by9Vc2VyVmFsaWRhdGlvblwiO1xyXG5pbXBvcnQgeyB2YWxpZGF0ZSB9IGZyb20gXCJjbGFzcy12YWxpZGF0b3JcIjtcclxuXHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XHJcbmV4cG9ydCBmdW5jdGlvbiBtYXBVc2VyVmFsaWRhdGlvbkRhdGEocmVxQm9keTogYW55KTogVXNlclZhbGlkYXRpb24ge1xyXG4gIGNvbnN0IHVzZXJWYWxpZGF0aW9uID0gbmV3IFVzZXJWYWxpZGF0aW9uKCk7XHJcbiAgdXNlclZhbGlkYXRpb24ucm9sZSA9IHJlcUJvZHkucm9sZTtcclxuICB1c2VyVmFsaWRhdGlvbi5uYW1lID0gcmVxQm9keS5uYW1lO1xyXG4gIHVzZXJWYWxpZGF0aW9uLmxhc3ROYW1lID0gcmVxQm9keS5sYXN0TmFtZTtcclxuICB1c2VyVmFsaWRhdGlvbi5lbWFpbCA9IHJlcUJvZHkuZW1haWw7XHJcbiAgdXNlclZhbGlkYXRpb24ucGFzc3dvcmQgPSByZXFCb2R5LnBhc3N3b3JkO1xyXG4gIHVzZXJWYWxpZGF0aW9uLnppcCA9IHJlcUJvZHkuemlwO1xyXG4gIHVzZXJWYWxpZGF0aW9uLm5laWdoYm9yaG9vZCA9IHJlcUJvZHkubmVpZ2hib3Job29kO1xyXG4gIHVzZXJWYWxpZGF0aW9uLnN0cmVldCA9IHJlcUJvZHkuc3RyZWV0O1xyXG4gIHVzZXJWYWxpZGF0aW9uLnN0cmVldE51bWJlciA9IHJlcUJvZHkuc3RyZWV0TnVtYmVyO1xyXG4gIHVzZXJWYWxpZGF0aW9uLnN0cmVldENvbXBsZW1lbnQgPSByZXFCb2R5LnN0cmVldENvbXBsZW1lbnQ7XHJcbiAgdXNlclZhbGlkYXRpb24uY2l0eSA9IHJlcUJvZHkuY2l0eTtcclxuICB1c2VyVmFsaWRhdGlvbi5zdGF0ZSA9IHJlcUJvZHkuc3RhdGU7XHJcblxyXG4gIHJldHVybiB1c2VyVmFsaWRhdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHZhbGlkYXRlVXNlcih1c2VyOiBVc2VyVmFsaWRhdGlvbik6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICBjb25zdCB2YWxpZGF0aW9uRXJyb3JzID0gYXdhaXQgdmFsaWRhdGUodXNlcik7XHJcbiAgY29uc3QgZXJyb3JzOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBpZiAodmFsaWRhdGlvbkVycm9ycy5sZW5ndGggPiAwKSB7XHJcbiAgICB2YWxpZGF0aW9uRXJyb3JzLmZvckVhY2goKGVycm9yKSA9PiB7XHJcbiAgICAgIE9iamVjdC52YWx1ZXMoZXJyb3IuY29uc3RyYWludHMpLmZvckVhY2goKGNvbnN0cmFpbnQpID0+IHtcclxuICAgICAgICBlcnJvcnMucHVzaChjb25zdHJhaW50KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJldHVybiBlcnJvcnM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdVc2VyRnJvbVZhbGlkYXRpb24oXHJcbiAgdXNlclZhbGlkYXRpb246IFVzZXJWYWxpZGF0aW9uXHJcbik6IFVzZXIge1xyXG4gIGNvbnN0IHVzZXIgPSBuZXcgVXNlcigpO1xyXG4gIHVzZXIucm9sZSA9IHVzZXJWYWxpZGF0aW9uLnJvbGU7XHJcbiAgdXNlci5uYW1lID0gdXNlclZhbGlkYXRpb24ubmFtZTtcclxuICB1c2VyLmxhc3ROYW1lID0gdXNlclZhbGlkYXRpb24ubGFzdE5hbWU7XHJcbiAgdXNlci5lbWFpbCA9IHVzZXJWYWxpZGF0aW9uLmVtYWlsO1xyXG4gIHVzZXIucGFzc3dvcmQgPSB1c2VyVmFsaWRhdGlvbi5wYXNzd29yZDtcclxuICB1c2VyLnppcCA9IHVzZXJWYWxpZGF0aW9uLnppcDtcclxuICB1c2VyLm5laWdoYm9yaG9vZCA9IHVzZXJWYWxpZGF0aW9uLm5laWdoYm9yaG9vZDtcclxuICB1c2VyLnN0cmVldCA9IHVzZXJWYWxpZGF0aW9uLnN0cmVldDtcclxuICB1c2VyLnN0cmVldE51bWJlciA9IHVzZXJWYWxpZGF0aW9uLnN0cmVldE51bWJlcjtcclxuICB1c2VyLnN0cmVldENvbXBsZW1lbnQgPSB1c2VyVmFsaWRhdGlvbi5zdHJlZXRDb21wbGVtZW50O1xyXG4gIHVzZXIuY2l0eSA9IHVzZXJWYWxpZGF0aW9uLmNpdHk7XHJcbiAgdXNlci5zdGF0ZSA9IHVzZXJWYWxpZGF0aW9uLnN0YXRlO1xyXG4gIHJldHVybiB1c2VyO1xyXG59XHJcbiJdfQ==