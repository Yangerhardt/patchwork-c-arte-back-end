"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserController = void 0;
const class_validator_1 = require("class-validator");
const createNewUser_1 = require("../utils/createNewUser");
class UserController {
    constructor(userService) {
        this.userService = userService;
    }
    async createUser(req, res) {
        try {
            const userValidation = (0, createNewUser_1.mapUserValidationData)(req);
            const validationErrors = await (0, createNewUser_1.validateUser)(userValidation);
            if (validationErrors.length > 0) {
                return res.status(400).json({ errors: validationErrors });
            }
            const createdUser = await this.userService.createUser((0, createNewUser_1.createNewUserFromValidation)(userValidation));
            return res.status(201).json(createdUser);
        }
        catch (error) {
            return res.status(500).json({ error: "Internal server error" });
        }
    }
    async getUsers(req, res) {
        try {
            const users = await this.userService.findAllUsers();
            if (!users) {
                return res.status(404).json({ error: "No user in the database" });
            }
            return res.json(users);
        }
        catch (error) {
            return res.status(500).json({ error: "Internal server error" });
        }
    }
    async getUserById(req, res) {
        try {
            const userId = req.params.id;
            const user = await this.userService.findUserById(userId);
            if (!user) {
                return res.status(404).json({ error: "User not found" });
            }
            return res.json(user);
        }
        catch (error) {
            return res.status(500).json({ error: "Internal server error" });
        }
    }
    async updateUser(req, res) {
        try {
            const userId = req.params.id;
            const userValidation = (0, createNewUser_1.mapUserValidationData)(req);
            const validationErrors = await (0, class_validator_1.validate)(userValidation);
            if (validationErrors.length > 0) {
                return res.status(400).json({ errors: validationErrors });
            }
            const updatedUser = await this.userService.updateUser(userId, userValidation);
            if (!updatedUser) {
                return res.status(404).json({ error: "User not found" });
            }
            return res.json(updatedUser);
        }
        catch (error) {
            return res.status(500).json({ error: "Internal server error" });
        }
    }
    async deleteUser(req, res) {
        try {
            const userId = req.params.id;
            const deletedUser = await this.userService.softDeleteUser(userId);
            if (!deletedUser) {
                return res.status(404).json({ error: "User not found" });
            }
            return res.json({ message: "User deleted successfully" });
        }
        catch (error) {
            return res.status(500).json({ error: "Internal server error" });
        }
    }
}
exports.UserController = UserController;
//# sourceMappingURL=data:application/json;base64,